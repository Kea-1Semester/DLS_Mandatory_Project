########environment variables########
# Docker compose will automatically loads the .env file in the same directory as this file

# To stop the services:
##  docker-compose down

#####################################

services:
  MudBlazor-Frontend:
    image: ${DOCKER_REGISTRY-}dlsmandatoryproject
    build:
      context: .
      dockerfile: DLS_Mandatory_Project/DLS_Mandatory_Project/Dockerfile
    networks:
      - chat-loadbalance-net
      - auth-gateway-net


  RabbitMQ:
    image: rabbitmq:3.12-management  
    
  userservice:
    container_name: userservice
    image: ${DOCKER_REGISTRY-}userservice
    build:
      context: .
      dockerfile: UserService/Dockerfile
    environment:
      # DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      CONNECTION_STRING: Host=postgres;Port=5432;Database=${POSTGRES_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD};
      ASPNETCORE_URLS: http://+:8082
    volumes:
        - ./logs/userservice:/logs/userservice
       # - ./logs:/logs/auth
    depends_on:
      - postgres
    networks:
      - user-service-net

  authservice:
    container_name: authservice
    image: ${DOCKER_REGISTRY-}authservice
    build:
      context: .
      dockerfile: AuthService/Dockerfile
    environment:
      DATABASE_URL: mysql://${MYSQL_USER}:${MYSQL_PASSWORD}@mysql:3306/${MYSQL_DB}
      # UserServiceClient__PROD_BASE_URL: http://userservice:8082/LoginData/
      UserServiceClient__PROD_BASE_URL: http://host.docker.internal:8082/LoginData/
      ASPNETCORE_URLS: http://+:8084
    volumes:
      # - ./logs:/logs
      - ./logs/authservice:/logs/authservice
    depends_on:
      - mysql
    networks:
      - auth-service-net
  
  postgres:
    image: postgres:17.4
    container_name: postgres_user_service_container
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: ${POSTGRES_HOST}
    networks:
      - user-service-net
    # We can use volumes to persist data in PostgreSQL, but it's not necessary for this example.
    # volumes:
    #   - postgres_data:/var/lib/postgresql/data

  mysql:
    image: mysql:latest
    container_name: mysql_auth_service_container
    ports:
      - "3307:3306"
    environment:
      MYSQL_DATABASE: ${MYSQL_DB}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_HOST: ${MYSQL_HOST}
    # We can use volumes to persist data in MySQL, but it's not necessary for this example.
    # volumes:


  apigateway:
    container_name: apigateway
    image: ${DOCKER_REGISTRY-}apigateway
    build:
      context: ApiGateway
      dockerfile: Dockerfile
    environment:
      ASPNETCORE_URLS: http://+:8086
    depends_on:
      - userservice
      - authservice
    networks:
      - auth-gateway-net
      - auth-service-net
      - user-service-net

  chatservice-1:
    container_name: chatservice-1
    image: ${DOCKER_REGISTRY-}chatservice
    build:
      context: .
      dockerfile: DLS_Mandatory_Project/ChatService/Dockerfile
    depends_on:
      - Redis-Backplane
    networks:
      - chat-service-net
      - chat-backplane-net

  chatservice-2:
    container_name: chatservice-2
    image: ${DOCKER_REGISTRY-}chatservice
    build:
      context: .
      dockerfile: DLS_Mandatory_Project/ChatService/Dockerfile
    depends_on:
      - Redis-Backplane
    networks:
      - chat-service-net
      - chat-backplane-net

  nginx-loadbalancer:
    image: nginx:latest    
    depends_on:
      - chatservice-1
      - chatservice-2
    networks:
      - chat-service-net
      - chat-loadbalance-net

  Redis-Backplane:
    image: redis:latest
    networks:
      - chat-backplane-net


  loki:
    image: grafana/loki:latest
    container_name: loki
    ports:
      - "3100:3100"
    volumes:
      - ./docker-compose-config-yaml/loki-config.yaml:/etc/loki/local-config.yaml
      - ./loki-data:/loki
    environment:
      - LOKI_CONFIG_FILE=/etc/loki/local-config.yaml
    command: -config.file=/etc/loki/local-config.yaml
    restart: unless-stopped

  promtail:
    image: grafana/promtail:2.9.1
    container_name: promtail
    volumes:
      - ./logs/userservice:/var/log/userservice
      - ./logs/chatservice:/var/log/chatservice
      - ./logs/authservice:/var/log/authservice
      - ./logs/apigateway:/var/log/apigateway
      # - ./logs:/var/log
      - ./docker-compose-config-yaml/promtail-config.yaml:/etc/promtail/config.yaml
    command: -config.file=/etc/promtail/config.yaml

  grafana:
    image: grafana/grafana:10.1.0
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana # Mount volume for persistent storage

volumes:
  loki-data:
  grafana-data:
  var-log:

networks:
  chat-backplane-net:
    driver: bridge
  chat-service-net:
    driver: bridge
  chat-loadbalance-net:
    driver: bridge
  auth-gateway-net:
    driver: bridge
  auth-service-net:
    driver: bridge
  user-service-net:
    driver: bridge
